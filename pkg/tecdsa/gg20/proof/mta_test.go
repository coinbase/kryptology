//
// Copyright Coinbase, Inc. All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

package proof

import (
	"encoding/json"
	"github.com/coinbase/kryptology/pkg/core/curves"
	"math/big"
	"testing"

	"github.com/coinbase/kryptology/pkg/tecdsa/gg20/dealer"

	"github.com/btcsuite/btcd/btcec"
	crypto "github.com/coinbase/kryptology/pkg/core"
	paillier "github.com/coinbase/kryptology/pkg/paillier"

	tt "github.com/coinbase/kryptology/internal"
	"github.com/stretchr/testify/assert"
)

func TestRange1Proof(t *testing.T) {
	curve := btcec.S256()
	params := []*Proof1Params{{
		Curve: curve.CurveParams,
		Pk:    paillier.NewPubkey(tt.B10("141823146723804727729633738357765828294831142954010692457328076293957505983859895806895734447482792591026897171204062485196286886661302420276834336655587982881158751341502328470707400685538658612981911773025635736943733001923468023720033301313420189810298555472599689752973326558212722047094791724129635174941")),
		DealerParams: &dealer.ProofParams{
			N:  tt.B10("135817986946410153263607521492868157288929876347703239389804036854326452848342067707805833332721355089496671444901101084429868705550525577068432132709786157994652561102559125256427177197007418406633665154772412807319781659630513167839812152507439439445572264448924538846645935065905728327076331348468251587961"),
			H1: tt.B10("130372793360787914947629694846841279927281520987029701609177523587189885120190605946568222485341643012763305061268138793179515860485547361500345083617939280336315872961605437911597699438598556875524679018909165548046362772751058504008161659270331468227764192850055032058007664070200355866555886402826731196521"),
			H2: tt.B10("44244046835929503435200723089247234648450309906417041731862368762294548874401406999952605461193318451278897748111402857920811242015075045913904246368542432908791195758912278843108225743582704689703680577207804641185952235173475863508072754204128218500376538767731592009803034641269409627751217232043111126391"),
		},
		A: tt.B10("69419834349415853894890573917063122307277917076225427448771019868576648260600"),
		C: tt.B10("18847568264006333380939287985787671948454143538446174819166825848732846525911186304740436914881274338959557435225686813604290193949014624061947647271411133485846391130016894483860450081602884139421405154057523839321239800217322755403591626776618194353121431489530790253985977500301181480604877832198998069341489839600864774760266800069826119409804215007615236664725258674727917968021583387375774570296029692159700158983350777557570591870565786777775317840482767648752436614429480990665662186556252959370410165035210824558411113808153951646950567756832761054357235695768210609602326533352980917662838030713969147577580"),
		R: tt.B10("51886819834371251006015218788911494248706876016519888346806242851820213680996324974371873475760855517466937827668415006977450699788621663903939308570896707699568767367925269253643717512759597981479828523349172771324686694516983594834820044069638828375581061206377589070672524406557592378617469206619362344334"),
	},
		{
			Curve: curve.CurveParams,
			Pk:    paillier.NewPubkey(tt.B10("9463658995206843770851525158043255816500680189464439363095520560386614479556714668895588462872126103893747723284862135073561694263269764946949629217223601")),
			DealerParams: &dealer.ProofParams{
				N:  tt.B10("10273826729942063692697010060060594189312421215159102246808412466917904003223823687218001436152302280389572289298911434937289415755177478451846062468556417"),
				H1: tt.B10("8167935838771182008182545199994552899088966708202004570505499867215233183293912199558208134810141196561068449078607686456211448067551558116808974484973823"),
				H2: tt.B10("1970661048433046426977416407106770949147216315571621971821051491584141078795051536868700972508332670892828402361693033635357376943122091647496860229630757"),
			},
			A: tt.B10("115526880823597585707678515351506817772182122025200976618245337689911430629189"),
			C: tt.B10("24863961566325565999591866542173666702673420408697429354806387592500301145340463984188913772103540073904498350983609595088568585339776683627724027187053064389377343283641347948144757981770327556063857980147985583807326240539344503674432544585705881605891637105814844708369139287177428173455597756160905566908"),
			R: tt.B10("5429643852343163390381887406843848421434905359379877890761970908590486754109980221258199728602735196971674594950794639675145303739445896672634255126793715"),
		},
		{
			Curve: curve.CurveParams,
			Pk:    paillier.NewPubkey(tt.B10("26509846098969606030666644039648735072473371434396262226628957752776958016920176604138513076285080490756189037154836350358953193044108325638765720332205170853305196270848703082212703922373221666660374795896208650056354982913710298628785967974006931457072686585546613336263077109720447885211641481085196018808984886607748129379016797794987745814597073536482747374479333608767826317573570455719831930309513750297610046842033491846725866000900668533198008806351432839430072881565290122414283921152984764756250407839754767248421661857280750005054466634329774370484024085212040716987194046113511394116210477123260601300881")),
			DealerParams: &dealer.ProofParams{
				H1: tt.B10("14992883567326790009834034452774380881734723148422937597913759615616527894329716582094216131278069891754415684125978444772511456388384539478359237139420627595253084679427853969706385560348203106008084518063368655525999918846958064735464480540227040261127629154933497666914570262795996253259552162123968669420229672303143236908906153814910725786469012911748229438005634598038592141662328047446496393313102162064295444876003000587651597062721350331609362965763517981159778802267296421256980684242791310186114847130909958129781491826248268454674630252197299528151229014292276126945753681298480222125140847225297966918532"),
				H2: tt.B10("14451347439159866238139129172581939135639377298556733244044449026294991997647446913414655524593230026671131401671272904249129277301803851355795175741045874967757624456900503361379054274654925224532323369122476258816285661783355994483540913053432288260800426312310730874341856134640161338601508545687545669401903291225410983268791172255873788692947107839385412427853422631156622058264538604067715438447935043009066210075839028695556578873902786008338985136644998643392979637373322946219799880176559775088371463960865119158841025722295583121063385860131824665408457687782230865745847949240766808890277225700715298320028"),
				N:  tt.B10("26863522432473035730119731755593267196935542494137223684869105097384908488378699999135799398068117050398327203794264171049568246937359730719602384478980465448464098415665075997352344166791916282650859961543602404343544893507812734906139108639107349334720437496231800511507757697269442530789089480688292170466415570422030582299025027913665235886474942651615736182869373910904226618891682710354700061830476496646926791079185776204186251841370042114552535830831492471396014245114861782301822918098243256413965536851647280940178471906923067287511334834085103114355667173309503520818859537916417500022813080379172002131161"),
			},
			A: tt.B10("102024524059200259914515251031129904340184560661551068326674667230176806449506"),
			C: tt.B10("606905289067344415850202384963927807134074353753762997257139430299812182620789663669753085660750100022719025049769721871852917326438594417966014441377841114473716278535355511853112878357850260859242353337424543205348122482112039398030783631927973189296947834031801759665061597419376410365790909188233494366639644168598330927045472353639926008764761376362372272652870903476621415523086627609902565278681254439749699499964324994947822843344753874646817673194134131040626119618863214379753666656464721612766553737646301416269176254237867925949500933369778301789961143888981155504260520734175430789915153903521880643114178314960870183923188006046608215171306656277401312025824694786889128622248770904521403820097381630141895711830288326748574592831238442924220948599138494415447657546918345399556268360296693801290614871481728134864429369982420396573830325179024969495621348263376326342276471894987989086008604688478904941945515982645748283506996193414153700843150014598669607700805670795651750859589109718155558799860867664043927196730496991416549697032467861774965678794181745578038357826073865504972139863122015040769720633544827076677588868998005770420542433350693915538883714213593428075244047359976923502176166652802828244500743984"),
			R: tt.B10("4316163330616341786022288762832695381195100634212156354702126474815234684335206120216209492000672992524572068497975715249928730630414020780112556541596959799124749690188860501409819228282255248826297918129804256958220248011547662972248478384023051376285459600289836843197969576018915415705606888468581697804440068058156017301462882709815898624972811614438016468969724947563418144645148725119578732409829110402274538268887921145538190094844077282783611364448423084988722318385383581689504139158759909146950046109199997715092849454619804168861913291000920258829447007487469712233737637494770509169807492681846224392197"),
		},
	}
	for _, pp := range params {
		pi, err := pp.Prove()
		tt.AssertNoError(t, err)
		tt.AssertNoError(t, pi.Verify(pp))
	}
}

func TestRange1ProofValuesTampered(t *testing.T) {
	curve := btcec.S256()
	params := []*Proof1Params{{
		Curve: curve.CurveParams,
		Pk:    paillier.NewPubkey(tt.B10("141823146723804727729633738357765828294831142954010692457328076293957505983859895806895734447482792591026897171204062485196286886661302420276834336655587982881158751341502328470707400685538658612981911773025635736943733001923468023720033301313420189810298555472599689752973326558212722047094791724129635174941")),
		DealerParams: &dealer.ProofParams{
			N:  tt.B10("135817986946410153263607521492868157288929876347703239389804036854326452848342067707805833332721355089496671444901101084429868705550525577068432132709786157994652561102559125256427177197007418406633665154772412807319781659630513167839812152507439439445572264448924538846645935065905728327076331348468251587961"),
			H1: tt.B10("130372793360787914947629694846841279927281520987029701609177523587189885120190605946568222485341643012763305061268138793179515860485547361500345083617939280336315872961605437911597699438598556875524679018909165548046362772751058504008161659270331468227764192850055032058007664070200355866555886402826731196521"),
			H2: tt.B10("44244046835929503435200723089247234648450309906417041731862368762294548874401406999952605461193318451278897748111402857920811242015075045913904246368542432908791195758912278843108225743582704689703680577207804641185952235173475863508072754204128218500376538767731592009803034641269409627751217232043111126391"),
		},
		A: tt.B10("69419834349415853894890573917063122307277917076225427448771019868576648260600"),
		C: tt.B10("18847568264006333380939287985787671948454143538446174819166825848732846525911186304740436914881274338959557435225686813604290193949014624061947647271411133485846391130016894483860450081602884139421405154057523839321239800217322755403591626776618194353121431489530790253985977500301181480604877832198998069341489839600864774760266800069826119409804215007615236664725258674727917968021583387375774570296029692159700158983350777557570591870565786777775317840482767648752436614429480990665662186556252959370410165035210824558411113808153951646950567756832761054357235695768210609602326533352980917662838030713969147577580"),
		R: tt.B10("51886819834371251006015218788911494248706876016519888346806242851820213680996324974371873475760855517466937827668415006977450699788621663903939308570896707699568767367925269253643717512759597981479828523349172771324686694516983594834820044069638828375581061206377589070672524406557592378617469206619362344334"),
	},
	}
	for _, pp := range params {
		pi, err := pp.Prove()
		tt.AssertNoError(t, err)

		pi.s.Add(pi.s, crypto.One)
		err = pi.Verify(pp)
		if err == nil {
			t.Errorf("Range1Proof verification passed but should've failed")
		}
	}
}

func TestRange1ProofRandValue(t *testing.T) {
	curve := btcec.S256()
	q := tt.B10("115792089237316195423570985008687907852837564279074904382605163141518161494337")
	pk, _ := crypto.Rand(q)
	nTilde, _ := crypto.Rand(q)
	h1, _ := crypto.Rand(q)
	h2, _ := crypto.Rand(q)
	a, _ := crypto.Rand(q)
	c, _ := crypto.Rand(q)
	r, _ := crypto.Rand(pk)
	params := []*Proof1Params{{
		Curve: curve.CurveParams,
		Pk:    paillier.NewPubkey(pk),
		DealerParams: &dealer.ProofParams{
			N:  nTilde,
			H1: h1,
			H2: h2,
		},
		A: a,
		C: c,
		R: r,
	},
	}

	for _, pp := range params {
		pi, err := pp.Prove()
		tt.AssertNoError(t, err)

		err = pi.Verify(pp)
		if err == nil {
			t.Errorf("Range1Proof verification passed but should've failed")
		}
	}
}

func TestRange1ProofInvalidInputs(t *testing.T) {
	q := tt.B10("115792089237316195423570985008687907852837564279074904382605163141518161494337")
	pk, _ := crypto.Rand(q)
	nTilde, _ := crypto.Rand(q)
	h1, _ := crypto.Rand(q)
	h2, _ := crypto.Rand(q)
	a, _ := crypto.Rand(q)
	c, _ := crypto.Rand(q)
	r := new(big.Int).Add(pk, crypto.One)
	curve := btcec.S256()

	pp := Proof1Params{
		Curve: curve.CurveParams,
		Pk:    paillier.NewPubkey(pk),
		DealerParams: &dealer.ProofParams{
			N:  nTilde,
			H1: h1,
			H2: h2,
		},
		A: a,
		C: c,
		R: r,
	}

	_, err := pp.Prove()
	if err == nil {
		t.Errorf("Expected proof to fail but succeeded")
	}
	pp.R, _ = crypto.Rand(pk)
	pp.A.Add(q, crypto.One)
	_, err = pp.Prove()
	if err == nil {
		t.Errorf("Expected proof to fail but succeeded")
	}
}

func TestRange2Proof(t *testing.T) {
	curve := btcec.S256()
	params := []*proof2Params{
		{
			curve: curve,
			pk:    paillier.NewPubkey(tt.B10("10101470169236701307989356288549331324760297732311017474717291556920575008390399360557666841555549459285530036654740758928369671798624054612167588575932381")),
			dealerParams: &dealer.ProofParams{
				N:  tt.B10("9219281919791721120536299917894003720538003954278079222431314286049931351876006427491931284170862581081845453829013148809004259723778319764538149793497641"),
				H1: tt.B10("6644196892054206924378867076159386233640761201152351529435080914361042562172198110073851611109267445161412502166236307500486777706747140647390726550075708"),
				H2: tt.B10("5688591485822699373931740080400822403356782026899259938734839090439486234586917273468710951700668234996427145700773040250733669224784692962885908122139650"),
			},
			x:  tt.B10("40506312095843691765306934782515395673726424143664779805834117474368076657330"),
			y:  tt.B10("91608552295707197290973748642034397870388125312818747214342656896298371656541"),
			r:  tt.B10("1025702387176102761315941478105919153302057170902354907170641637385283629052226180380836252487014183371031943819290321046264280128712759023179440004067435"),
			c1: tt.B10("77354088856869596047326860655816379899282736592351758252376955959642660833724912873058095618492448830932484717132524379596300316296173378157021077360406566328813261560359655672580394103296273833156212883702975483977364312384187692944453695070505171585703326682734887227351393788925364680581746031838277285466"),
			c2: tt.B10("17004990195156315241753021133191992439789658953773722126673097330296464019724764264996864768928981272077832255565591448904478553493221856699346526964172786947082589615062905025125280493879056807623761446915163191997637436815542032539811238602044053524889181479432335180310168444568964690167881731782501698826"),
		},
		{
			curve: curve,
			pk:    paillier.NewPubkey(tt.B10("12210032433973194713101879401736114046289525026621157295286479630950151870825704771591565830307623853624194868105373425480240786504903455545980711905540733")),
			dealerParams: &dealer.ProofParams{
				N:  tt.B10("9980343328531824486415926064525896643228568487098332026186422359474742346064230978030493474421691362007851816031135057302846980207789705913115253186949929"),
				H1: tt.B10("2469673179884483986143806855579592525432144934828258881402734291568845128541228962341595624784892382862940048418684325214631955580804153588960938651100023"),
				H2: tt.B10("5685075883067849042500523803668918481205783573655253866720026214840936701271228054652129542672137002652385298991713452536323897385839029159489038543618111"),
			},
			x:  tt.B10("33934816377747708495412361531405452081196512704597652657944332337187324986623"),
			y:  tt.B10("102270744367391514569794022467479443059169661536123774871981730994182490118071"),
			r:  tt.B10("4165127658587062190933248485677488861301595828635816881021451252023753420992129130676454445438906326254296832479553432223831169371951594455560082190939070"),
			c1: tt.B10("3137646227323871093340569416710991921739110531106602992459184319984538323233705778064679266338098210649513203253885987958171516776148995543543874239450894815730651947941578431695081314470146489521545931896062912145090884587761137595453392468669129591664836000059246133095103069755216958353868086703009409007"),
			c2: tt.B10("138654675113885113378698602580517355423880860593777339111253500591992805958492882276838351511180636222321227714065930771682459365939750174078853758100746945680604463574825103923378305261514072636206706608183124627980636520200235157899718863601077116821206488463146735547385917610753597048111302847717611764798"),
		},
		{
			curve: curve,
			pk:    paillier.NewPubkey(tt.B10("24006913232556170743687256926411383572685914178725475584546729266081072560742664682316751513922351492731916830819991652570232108587525710585787212295495042393457532642958235116228331214937916656207743912133379867824263625067181157967173699059101735486321531980561382043427722981553748630204989026528801081173268163768220316884987314169182764807097584743805541115263331414941361031802812537543888741551242018695090519994120080616317331369873231788340089609365466582767729028404412551414411783991423226467702149120924355765283967364974919403961589444957748041302084944730207635344441075632726716283335883554650872391817")),
			dealerParams: &dealer.ProofParams{
				N:  tt.B10("23860321693243408915285634667126319607029258830310722858616298293090774243853938528516172318323586950359261307782164021512152687506385993022681970597450674643369827412129155830719269633871079399119546887419782449142407872196757762829680911694406871079920722666739220339627194776816161447024512993082597495586758354580607447584695500284641632976305705127500848686700697864168339353722767241861901618702529822855652770760839810911469800714397927519979196161681565110864846050753366224989966372990306678566170613749484781791197178496155518267861948015142128777050453948357016204687631478842990872969865562749504308289321"),
				H1: tt.B10("18739963062868236055523374223403987299519125465905789112585717097241915094501689476952575752645765949616652320751728118948443965846550107873550298482277861881212384752345824547773084194224498010327383344716012292771833811785400473027252158122724183047497102273824709944530327171103095292901313850904394313756204621107931116195962519595510074637264528286866179535920411663823822050355570037597313507899569727799048016402592869527872094986310414810244530418193835726408360459997193495554207655504488141530377908260277369300355796046620382270308875262484043788069568055471394564032265334439460399732013818519087125209291"),
				H2: tt.B10("12163400087917683646137489145747822585252103269291951065968363100667845814487256597741255884887916357152485768705079255596283306041038105293053731433242061286760695046099554060517156715815248955428884920797601991295472823198873625504858547757752101542129213721934397771916784953246371682758165236787047386274743475196173219919703931897838802897118179026707936623911659023941810590819891136115782747594034401712796912010250950460753996445790779228196800904305305557513340729372141761372316869712752692253017128388161025717361881141865639873860953634747335447043871369762137568601156584516703599828999624681383424904268"),
			},
			x:  tt.B10("714521702452913309973890361610177786312444165429435315277429111610412982630"),
			y:  tt.B10("60488338610297333276961494112198968263454274330624934056476591461697034077743"),
			r:  tt.B10("16900821424743833442009144354962654441202729310796124567328369663146597890059149403647996606670389620169953948632238878429989237277520220254007526274183768505789754866671321626390926921115006725472775463047633384953483218458880790845430677492257172083756582305793667294849745484181094114153159903145157694182864228304404451693023722677505027962968909170548749248159081940480588567925103041106639090811184746593469854721168902407394008913019716729235161223478002135531410233213570316745931022099194135822464996153237428156515512589005955296643185561929891073302100491218771033585531411799373125441690208668038451144119"),
			c1: tt.B10("464866952852913092347202302187506800006630275997158690576467369160262286832092217254714435237418906716576120732215276581391583436712457855565949230630753226132768820239354111308450355834170036262275041431436393986225764154760441302733054701716360093825803706112674820577220074485830350261966524251280067408732862805269937036694720529361210420785117185393443358654009779898418312191692062264618218091331404395199552849986837424325916403944068685457732760883137533335923883928334180126411574348555187291633923796221856030393195707239688430342076538433037977986334930568865631426380247571396851308386283571803949871075776379134665440737979756269504438503412503367048072728560799164032076778640238976351032285854684893201455404015670413766043037872528549530047318211423151300083425338011538655419126913270418373290547764482868099031758569002021258625813564434869316786643458814202720512927739028875176581438529156378620559783948696214417098710071638985731360204131707639660620459949603823171257582498738788277970562341882508213506138743367776192561855262827993558489205971069614003406633599273081878483679850823958594648825170338189768315766110860686667501703858115667359037267469518222285214580865767971590133972212867800115070126953368"),
			c2: tt.B10("50947790314834737564793114512732962311643546272428598243780199915464180509855005660446596251778588298623800878947535400261953748486383930791599840370899643774515628070871512620488012441389158347643576663803943697764354694693464874802192687718703813081806741385831330546121262138915463649086431501928549048084207031022200788569062322274771746387871161498922973825423156657570948993539240959162162175468216560339702423260864032142891138134202878951551745224929142533899554082126462546088786041958354401856417183706477112247346350881599345225359880523761783484115033198830776843960176773850112035879194596935434895398205706773564741872261468158985681521158920463169198738082005844028900537758771450458165256526682213887327834891552344739159647600202404540144327573298107660478543341042666159716108630849726471475705375155291198774081636876105008994252153359513007450337320592976691126588286355014317312898910006770120925813571589228379518006101190660055303239182776774584624327246527377396104857171605327717031835886339349183024067501887096353764525081421978295703523616890491220143305573418356800713933783211658917147322018694269444924886806091771486979904228139900262909097284510908297582654681791377716943323920334168573552091293459"),
		},
	}
	for _, pp := range params {
		pi, err := pp.Prove()
		tt.AssertNoError(t, err)

		vp := &verifyProof2Params{
			curve:        pp.curve,
			dealerParams: pp.dealerParams,
			pk:           pp.pk,
			c1:           pp.c1,
			c2:           pp.c2,
		}

		err = pi.Verify(vp)
		tt.AssertNoError(t, err)
	}
}

func TestRange2ProofValuesTampered(t *testing.T) {
	curve := btcec.S256()
	params := []*proof2Params{
		{
			curve: curve,
			pk:    paillier.NewPubkey(tt.B10("10101470169236701307989356288549331324760297732311017474717291556920575008390399360557666841555549459285530036654740758928369671798624054612167588575932381")),
			dealerParams: &dealer.ProofParams{
				N:  tt.B10("9219281919791721120536299917894003720538003954278079222431314286049931351876006427491931284170862581081845453829013148809004259723778319764538149793497641"),
				H1: tt.B10("6644196892054206924378867076159386233640761201152351529435080914361042562172198110073851611109267445161412502166236307500486777706747140647390726550075708"),
				H2: tt.B10("5688591485822699373931740080400822403356782026899259938734839090439486234586917273468710951700668234996427145700773040250733669224784692962885908122139650"),
			},
			x:  tt.B10("69816829924976195108406719236630054316602642151744146726591584302591798356879"),
			y:  tt.B10("6091419963879175825016282184751419224433102581039722555067324512579982829027772376266606470474464178886647266708567804526639019529121691232740502772158395"),
			r:  tt.B10("2057508414415506856632950455679739628101265359451898937499968640834406996284985079891571080368801894092310083101905560673405285298960212293813512484533243"),
			c1: tt.B10("77354088856869596047326860655816379899282736592351758252376955959642660833724912873058095618492448830932484717132524379596300316296173378157021077360406566328813261560359655672580394103296273833156212883702975483977364312384187692944453695070505171585703326682734887227351393788925364680581746031838277285466"),
			c2: tt.B10("62625690358179126259470167549477031595729452083445529618665252599670128159810380715262451914271340539338064221878983094991977027339744473746794751463196253529296039288796638711807366538447194372313357153970305414515194509313903498505159827101743516759038500222068024267206874190242842752012118257578748158935"),
		},
		{
			curve: curve,
			pk:    paillier.NewPubkey(tt.B10("12210032433973194713101879401736114046289525026621157295286479630950151870825704771591565830307623853624194868105373425480240786504903455545980711905540733")),
			dealerParams: &dealer.ProofParams{
				N:  tt.B10("9980343328531824486415926064525896643228568487098332026186422359474742346064230978030493474421691362007851816031135057302846980207789705913115253186949929"),
				H1: tt.B10("2469673179884483986143806855579592525432144934828258881402734291568845128541228962341595624784892382862940048418684325214631955580804153588960938651100023"),
				H2: tt.B10("5685075883067849042500523803668918481205783573655253866720026214840936701271228054652129542672137002652385298991713452536323897385839029159489038543618111"),
			},
			x:  tt.B10("105977005668720423578092754536102512363464080739402364055701968817880388173564"),
			y:  tt.B10("10580891309922780663455235282515343025623240093871582757351334419612913975217510679538051246788872785510052073278327271011365532533554403624959069180581073"),
			r:  tt.B10("9136335827666726813247236926436786672989404553255067682415003421023171372953384600969639069948806408705646121348918941058359753103225314459714441851896890"),
			c1: tt.B10("3137646227323871093340569416710991921739110531106602992459184319984538323233705778064679266338098210649513203253885987958171516776148995543543874239450894815730651947941578431695081314470146489521545931896062912145090884587761137595453392468669129591664836000059246133095103069755216958353868086703009409007"),
			c2: tt.B10("117162960239617992288211111570585143841439876387814723449486127427269624507583529452070542802236573762087221934918534435924767110744800267605779648487146533084050398880360218943350553051905824704311237243263432485578052690072578609844333462008562932905463898722374546675589796756376946519865698604982035075860"),
		},
		{
			curve: curve,
			pk:    paillier.NewPubkey(tt.B10("24006913232556170743687256926411383572685914178725475584546729266081072560742664682316751513922351492731916830819991652570232108587525710585787212295495042393457532642958235116228331214937916656207743912133379867824263625067181157967173699059101735486321531980561382043427722981553748630204989026528801081173268163768220316884987314169182764807097584743805541115263331414941361031802812537543888741551242018695090519994120080616317331369873231788340089609365466582767729028404412551414411783991423226467702149120924355765283967364974919403961589444957748041302084944730207635344441075632726716283335883554650872391817")),
			dealerParams: &dealer.ProofParams{
				N:  tt.B10("23860321693243408915285634667126319607029258830310722858616298293090774243853938528516172318323586950359261307782164021512152687506385993022681970597450674643369827412129155830719269633871079399119546887419782449142407872196757762829680911694406871079920722666739220339627194776816161447024512993082597495586758354580607447584695500284641632976305705127500848686700697864168339353722767241861901618702529822855652770760839810911469800714397927519979196161681565110864846050753366224989966372990306678566170613749484781791197178496155518267861948015142128777050453948357016204687631478842990872969865562749504308289321"),
				H1: tt.B10("18739963062868236055523374223403987299519125465905789112585717097241915094501689476952575752645765949616652320751728118948443965846550107873550298482277861881212384752345824547773084194224498010327383344716012292771833811785400473027252158122724183047497102273824709944530327171103095292901313850904394313756204621107931116195962519595510074637264528286866179535920411663823822050355570037597313507899569727799048016402592869527872094986310414810244530418193835726408360459997193495554207655504488141530377908260277369300355796046620382270308875262484043788069568055471394564032265334439460399732013818519087125209291"),
				H2: tt.B10("12163400087917683646137489145747822585252103269291951065968363100667845814487256597741255884887916357152485768705079255596283306041038105293053731433242061286760695046099554060517156715815248955428884920797601991295472823198873625504858547757752101542129213721934397771916784953246371682758165236787047386274743475196173219919703931897838802897118179026707936623911659023941810590819891136115782747594034401712796912010250950460753996445790779228196800904305305557513340729372141761372316869712752692253017128388161025717361881141865639873860953634747335447043871369762137568601156584516703599828999624681383424904268"),
			},
			x:  tt.B10("1183169060828468438002965363358707918795988635564203608058950247926495168444"),
			y:  tt.B10("7293911945949010390458324767285044973990376766933756148434784925293433850020940532757951881022757618321061744633083721332134550426910076435396510033963585425552696429667115345073232612562744840167186248507049396229733012483438857042045789124596166171036562118778997431227842385129042847771769687182071724319010909289821645417665264498977305772962006468150887518642140736818354425900118292439282479696823894874913967622594763555647835253420302749102279713541603132333565142505991371129067951473893338055811512136134827753632413214786435767384138288631910921011600701133728447389217785317320101805018751163182406468255"),
			r:  tt.B10("7277115633059593699842594283205544005606789287205763437225637228748066593006893949270073174884964276552716253205074502736294210158481341005306224069327225246011858354719224071629478444010965094418317631572158089119615004017614950610745842639284941451030180613556468553229283917977108351833535295719351149428921934299360505371202226418621518596417048730228765246349189673850261365511958826980752021218666379299128790765982842644649907192714080776727846821208976399163844571810485997271552038669644288560524148724337682439294331287480204495332352762669535553814001552810108365326941186198150890462960373306336864507735"),
			c1: tt.B10("464866952852913092347202302187506800006630275997158690576467369160262286832092217254714435237418906716576120732215276581391583436712457855565949230630753226132768820239354111308450355834170036262275041431436393986225764154760441302733054701716360093825803706112674820577220074485830350261966524251280067408732862805269937036694720529361210420785117185393443358654009779898418312191692062264618218091331404395199552849986837424325916403944068685457732760883137533335923883928334180126411574348555187291633923796221856030393195707239688430342076538433037977986334930568865631426380247571396851308386283571803949871075776379134665440737979756269504438503412503367048072728560799164032076778640238976351032285854684893201455404015670413766043037872528549530047318211423151300083425338011538655419126913270418373290547764482868099031758569002021258625813564434869316786643458814202720512927739028875176581438529156378620559783948696214417098710071638985731360204131707639660620459949603823171257582498738788277970562341882508213506138743367776192561855262827993558489205971069614003406633599273081878483679850823958594648825170338189768315766110860686667501703858115667359037267469518222285214580865767971590133972212867800115070126953368"),
			c2: tt.B10("87054746811998808852750056109819023786671110957815179115900051264949784342635809119831910125419284770492485609549082903423179703744463561163569834515491136663352518336126032974632263674792581836367278021499562100451772533596207842635483356680337833976709510891868134899756376855360834845609165180238776036642063520760473124267720102852673018196357588477924410997706540293465921355167014551128362709936645961409083040863315940847250131054475475902056256228640208391495301996700461783302757908539516329083394794959589562320450655849398458971004648845697279534368242916131585772073908370105312752870580536509251252543234549517636502223982430171411338358101387742547185790223841575969928322674680552415533109012782424923657732851492401156454799145861648550278513023956759591228830652765771616189289750466703399263657155477884193649025885818223829232243010534182019169454495579133314331205842873596879928283271465381113279539118677413311470168563120989509112283274008507717309272957541695858123739357199894271068524097884917020267347009001467460730436391704379761867033238124489154030180080594750319595350447722626278014518750212038735434477954916503424607892883739579417439328783709705164147296137752523228552974616459937563449481724082"),
		},
	}
	for _, pp := range params {
		pi, err := pp.Prove()
		tt.AssertNoError(t, err)

		vp := &verifyProof2Params{
			curve:        pp.curve,
			dealerParams: pp.dealerParams,
			pk:           pp.pk,
			c1:           pp.c1,
			c2:           pp.c2,
		}

		pi.s.Add(pi.s, crypto.One)
		err = pi.Verify(vp)
		if err == nil {
			t.Errorf("Range2Proof verification passed but should've failed")
		}

		pi.s.Sub(pi.s, crypto.One)
		pi.s1.Add(pi.s1, crypto.One)
		err = pi.Verify(vp)
		if err == nil {
			t.Errorf("Range2Proof verification passed but should've failed")
		}
		pi.s1.Sub(pi.s1, crypto.One)

		pi.t.Add(pi.t, crypto.One)
		err = pi.Verify(vp)
		if err == nil {
			t.Errorf("Range2Proof verification passed but should've failed")
		}
		pi.t.Sub(pi.t, crypto.One)

		pp.c2.Add(pp.c2, crypto.One)
		err = pi.Verify(vp)
		if err == nil {
			t.Errorf("Range2Proof verification passed but should've failed")
		}

		pp.c2.Sub(pp.c2, crypto.One)
	}
}

func TestRange2ProofRandValue(t *testing.T) {
	q := tt.B10("115792089237316195423570985008687907852837564279074904382605163141518161494337")
	pk, _ := crypto.Rand(q)
	nTilde, _ := crypto.Rand(q)
	h1, _ := crypto.Rand(q)
	h2, _ := crypto.Rand(q)
	y, _ := crypto.Rand(q)
	x, _ := crypto.Rand(q)
	r, _ := crypto.Rand(pk)
	nn := new(big.Int).Mul(pk, pk)
	c1, _ := crypto.Rand(nn)
	c2, _ := crypto.Rand(nn)
	curve := btcec.S256()
	params := []*proof2Params{{
		curve: curve,
		pk:    paillier.NewPubkey(pk),
		dealerParams: &dealer.ProofParams{
			N:  nTilde,
			H1: h1,
			H2: h2,
		},
		y:  y,
		x:  x,
		r:  r,
		c1: c1,
		c2: c2,
	},
	}

	for _, pp := range params {
		pi, err := pp.Prove()
		tt.AssertNoError(t, err)

		vp := &verifyProof2Params{
			curve:        pp.curve,
			dealerParams: pp.dealerParams,
			pk:           pp.pk,
			c1:           pp.c1,
			c2:           pp.c2,
		}

		err = pi.Verify(vp)
		if err == nil {
			t.Errorf("Range1Proof verification passed but should've failed")
		}
	}
}

func TestRange2ProofInvalidInputs(t *testing.T) {
	q := tt.B10("115792089237316195423570985008687907852837564279074904382605163141518161494337")
	pk, _ := crypto.Rand(q)
	nTilde, _ := crypto.Rand(q)
	h1, _ := crypto.Rand(q)
	h2, _ := crypto.Rand(q)
	y, _ := crypto.Rand(q)
	x, _ := crypto.Rand(q)
	r, _ := crypto.Rand(pk)
	nn := new(big.Int).Mul(pk, pk)
	c1, _ := crypto.Rand(nn)
	c2, _ := crypto.Rand(nn)
	curve := btcec.S256()
	pp := proof2Params{
		curve: curve,
		pk:    paillier.NewPubkey(pk),
		dealerParams: &dealer.ProofParams{
			N:  nTilde,
			H1: h1,
			H2: h2,
		},
		y:  y,
		x:  x,
		r:  r,
		c1: c1,
		c2: c2,
	}
	pp.x.Add(q, crypto.One)

	_, err := pp.Prove()
	if err == nil {
		t.Errorf("Expected proof to fail but succeeded")
	}
}

func TestRange2ProofWc(t *testing.T) {
	curve := btcec.S256()
	params := []*proof2Params{
		{
			curve: curve,
			pk:    paillier.NewPubkey(tt.B10("12454003829785224424909094445321308251642868283898585771126291413816540758580767663318262594367601382376375285059803068275753905283271465428331446633428881")),
			dealerParams: &dealer.ProofParams{
				N:  tt.B10("10565068081883900157917697460780075318076969969901870528290601230599518987697963206864737177306559344301211791508548333134326255847602343521746041372426881"),
				H1: tt.B10("7995751561221948028555930079358601302030574855166341757560091202406660630455075618838456965406208797281104787963327486869802618778764549164875103578199469"),
				H2: tt.B10("7656532047837282735662605356869379560760308364231923312709699220273737479894881594867882898131984223682773313158428858357773402466278427550311109701486213"),
			},
			x:  tt.B10("78679432430510818674254951560291342722382075108149106549600487880415633425124"),
			y:  tt.B10("33593906196368389112547558738343219272577279846840502877529866233557792769420"),
			r:  tt.B10("4363484852273523603262320180197243948656453076626233042069908639363078809310709196408992073830475754771592087220152292969998955037959739958755662786605637"),
			c1: tt.B10("143139889611903589791816262441353094495263441207310098132338003158492847002109314489881492343532425133051402774239042571452064034364626727430154115486293525771026058106095404307844006484693932483119088608294103884465173259538644991990959041058781505906814834658717310198971570959147449328032151332111925175205"),
			c2: tt.B10("19195348154199773778746648720722898279135046719896678010947233222132884371365736173725982230103203752735057259846207279148538892285247200735637734794475203364830106371076254231163224494408103114834371528149937496661574602804458404535257757455480616316607980648677031500879028841134692321704698761187480067873"),
			X: &curves.EcPoint{
				Curve: curve,
				X:     tt.B10("91728638115298553698534579680860154297052620960857262003204971580447260676714"),
				Y:     tt.B10("46528621496185269900738225944046033204111426188519579310716037563019923659840"),
			},
		},
		{
			curve: curve,
			pk:    paillier.NewPubkey(tt.B10("1060646492933110030733036957140437117778853920088720844678695121930416862871848281832311778181619020077402392416415062286117610417982744789370366578341399268003467505720475646331195973509120599160516265415812314251530320408372372861")),
			dealerParams: &dealer.ProofParams{
				N:  tt.B10("1092329328730104790080891116775013322627506771460114583079604278592390501361457437165424061010231921145619588453126221328435382425114836966113840506851641980212559859014884518613814057080788292341006461503638915697811040968629875229"),
				H1: tt.B10("475106144368109368621647223376250922203280347957986484537098262925547265747101998903429384389406883704682638887286062550314246547956114040038314931266705139797302692613495472203652050545575197911638917386795821397986672973442649852"),
				H2: tt.B10("908892396653303011912973312306706584315788720901361712520264106930695316871113623418118614676353709160818322009456857252848481098273083048966416012141843137572088979329467889633963130784228334674862715752823932989133005328963465921"),
			},
			x:  tt.B10("93975111102165822399269480886764671330767061353420955618574273210497999990380"),
			y:  tt.B10("21032700161639046303970867139907647306712291834027369667420222353625227435482"),
			r:  tt.B10("888058240099898369796301614560032313892768638268907539325375604144277016366624173232747685340457922458934109617422293672549612621418610901551787056438299857915004944612536735623417151331408192254932880030374366112203761635966298450"),
			c1: tt.B10("1053114622466963003050574957242008810794692807386408905242320867953216982016919832662798802583673970059568892771139314303098776240720837149047157440593394428053903998661246679248461257929216872492254813539989922056355923322352092748537060888144046806888646757812380709971001358158052219367381617739549374202298322532799430177580147769298175501100566420263545685855762900224502196330893960190794093573840711343202150393882356493072497241709222593553058376990428749"),
			c2: tt.B10("41340698469333152688260868181324402159016800779397564916350495374017145720920675724935526413079768433553005381005392056459149330405772567609741329078236657113817238466831526092986465023085283588691781682327796646400197406692686047685044126078255854462075285791347534285693993198879333558346181066297564145446802840188653998155595102332574923195778188986280370012966298916870489742913815430939983119279229418973563724812108992374019807799303115231239067250729564"),
			X: &curves.EcPoint{
				Curve: curve,
				X:     tt.B10("107601712100661113061031434183161356564972924141547945478098809692346131828080"),
				Y:     tt.B10("3589084389824339800037562590910754992453197762153609650478957748952965377128"),
			},
		},
		{
			curve: curve,
			pk:    paillier.NewPubkey(tt.B10("174153312534089570851525899271032113589979275411880883678905382495482218200069318069066709881321340381727078580248641402176174621811075736768090255011847709291394451539546906653608626836448448020222398750360809711536150952843601595213887853850370357766230989289426170056175863362575474454013936944961991616917")),
			dealerParams: &dealer.ProofParams{
				N:  tt.B10("172651933488426286000131404169487588322431008522303036264382503852354196099850367973622481590491253503822918355198554197718452410956377207564832063926424629148712821482012770717310191205998337495810553384655519767643630533417620146481480034022054172027443937693269900872590795674430004269196692532205568992797"),
				H1: tt.B10("118590594397995715752759118478489421665301876966360944695255662546217438576754007990572612412558112202779477174654578819656999557709637501325095444942727570178523420463669183588227929688886106825223816617633684958293667006462159268928157372520994885081158859164577709896423981522572434717430302992428297563136"),
				H2: tt.B10("134670168222115720330617018933117329706043690406511938007555183497088606773771086397373341514464452199836099436095879891995241553734608283972469208903671070619142587047785148969236848204481295341629735981076134200060203874731519195293356672742761698767188091288714798209580414829549336877389345746546623854646"),
			},
			x:  tt.B10("94883389939522608142783953492511535984620124930717773458059805158662749070619"),
			y:  tt.B10("34358799730287490698853766971219361405649677190937041454514891295127376924398"),
			r:  tt.B10("59238036350161433683964600968466153339586133851223832290239510260777927531675142454348071309595252200374748010110311763004371190255994800674183695925497200262590510116882625824957107227468018079094027884062705673526463098161390567333481840166248876465673217759292849432688242893016519027966940180059894985824"),
			c1: tt.B10("10775808173033770984516167593505365443783752555324100755349598877836047307677011637063063086315464238435942493513507939945317658034289026591317406423694552504425405748691173106069124708756001018953795030004747650666979352069544640241341341634464323746030746804743164353982891624309639357226399617037483637891422140507649333375651193920153187885728755575682029759253435182307427668124884893428171790688719491734746237016553855965720036356784163356580399681227692884720048765980707977190599610039433157123735266679615119769970198124644524904227106442303993553933698710757937136567369366989575579828638106312021244735576"),
			c2: tt.B10("8669994847222944827731413185238631223342512933073598749594380741902881926721448323152761878273603280020540092523354623686620318555949946475124609531059425098852796639856168570781706247043134655390950061788371876610687989021227302828684645137706649838806983143756979394641645839296366192418845809885213117243547864131270828413851148272506504758952499726235700808985132855761659056175068850855751051424547525636181432636854662717404566880331863655422392173296127670644628347486696859388167996605618709772946306399239151611786081555662954810096380818816671849617579744285984415619450579838201336298597808039360903321169"),
			X: &curves.EcPoint{
				Curve: curve,
				X:     tt.B10("90150166232895062437787689690145553528266570780800420868158771113502089398282"),
				Y:     tt.B10("1869077702054421301647617103108125015760730326845474403195185534538329305747"),
			},
		},
		{
			curve: curve,
			pk:    paillier.NewPubkey(tt.B10("21343818843614709778423937467108011341949327450311182535762771398497610046006056929783583120189923419499898117106346564723970688957902489020760820401098919871682075861931799235066903163746901354170019434386796757961110772586542136098473272723261983749356990793919918143337029627426527223682816946912414305615650546812211977749178634879531473845018271907797786434001508143575303841556331835005538916568952225221288873486059556819320279715818032087600078162347990319903724428078162246887152420651155875072990694535614688712113234073038424857000481868713031907767238817547353122272824696372544813541777562757422452703389")),
			dealerParams: &dealer.ProofParams{
				N:  tt.B10("21440609852763007138735819899427806271414854462185275004105464455197604028063646788155856601369873449136102779324764141381374061363107493235913636137967294095523840220584234845218424429287340200522460522857569274189388148014800027306925331046969787804744347172513704978733300054228429317388724036765350349009865056654594809086359543736284803700478627750549030595336332998309598246755011660697153809128912586862548974075788304443681642756309026939544472534183771013135688836883808280586469385349750553135584076915837689561368338280498868185703287861527010800344946216746545759790109259487926065269704130409284767429177"),
				H1: tt.B10("16082635924491180859892052103348669817831264904927338842878735505605620083836951511324620211235252509887724382590329701187323154406501073390714214519796783889250963354564148094242739350419652368817226620967931116172473952600520718782740615687485618371096717393827640715223390036730088624516780108618713553389032163184056235335558973728431463388816701504113051515919433765055909706322416878748025691541271134753796299366797197495449817911629608648248034133751449416402345897196052605688982385924866769136480343090234200198250957774538326561070317488121335369054416364814254940990819583076364003690898899394819454633098"),
				H2: tt.B10("14581575636264039655004935624295665826821662670021192681449849898952812734812533416341722319273085643584616068165596471926906706017999808980633056192835003414324093106336680886193782067021903503846628520391128045160570365359689255780975718001105668028170355680197829874604770103036088371504694876566679319280638385262068207480704484804089815241036119191122828877958876654866902642083194300482531632717542525621225069688599520378773108909949351788022723435884261787275644523174797781228241972164905878355557210473408688766653679471890512201620009709897132423036276837599483769590210914062571174776497975951152604861909"),
			},
			x:  tt.B10("56520833892405744861798653208084704711827049946691780611270455592318691798476"),
			y:  tt.B10("78232550637745839305165195817934893307601223459606834248995606099453867937745"),
			r:  tt.B10("9946567100548993249012340658105268778650693965119700801608149211510796739900388058218198700978846608588059973112468669026266207961026625823948372235183934590831468483656837588613887746109602208558361942956054575713888749011558935168263227475826290050119941331949176438039072729823415114695606557506377839668633000824594261781349788019381290494222894432779202335608576778880386740215251099705459476129479606075600774519041233411211390500861888372768175157849318504734268770297902212819860691399274500082304841576969990476081103065632008731128674268935918170996647482274630474817804277720647335686780855127689206010551"),
			c1: tt.B10("390111299656227329049911645962500049392377387594152457668485483110800144720345180158229237161842828307254342803083379655054467517296523210675130263404686580646992792502830916302607437160813512962532146963059202294210687402129360020946526304905339187636229176261028993936810993006653314076335851074005727014314790162490593160207216642747021985552411284433670026363853068691081342083837886029591829540186654863374285161120653539204838867832932794810504576871885290319716389567292694319143715930162553277300961962282646376301436460212705495080036300372011810745765622016658529618697349936654020519012125853508298624943295528382686465797342272133086342053444730761082595522615614885422356326860879270969967076748246605215181659738839204838987139706656213356349676893722627421667492378370979872311805729149448736645369425823598900065737429573410247512812271614068171292075691207858929206060218031819070034607110062687579951509005561963770102163971963284714329558342723034716742547265888594343447182501412167939138160985186539850524487166372948687703793947452682996182101681482493637159856664957425454529042197760223673798097694156006735908818858773992720569533879034557981434329714599172480672498298131329669845732971041195290211843618632"),
			c2: tt.B10("76393016218744255122410008505645830302161163757329991891258193877243572573191359161137092611285681900971054214148874111315803943453441271236132564570471997219962256463739327253241831710550984604323623133440863687807106971417162302656340154123556196059267019813650785102320279454558442468410965964046508464880900882369207970551681600152529643742652562215939692356050969371682711938942857698415959186253370728002534848118688046065083131510944868385773466286126970213703120620436158606369088391686830900507433014047022014733758972553521226409513599033661420933842107861418213897609271736060400182527314036585596069558406632015325212074833626053690174036592575384425473077817035410251985240494795357939164949401141794583831427715487478002037651985206501266398847135251773278706910054417397500331605503217051476405590922249668129192842410789555156003154535383608379807091956699767500212411986125645384769913601379471947987356817181837661893259115204167989970965778865999290551846611944010029042259919662437696792390865082254535489075497914595253489177724352050301559729156702646069006066128704645423500048450688987383641355944930480381483959540276139530148577955364459669692042789035810263488174971695734761749891009880633926881798792574"),
			X: &curves.EcPoint{
				Curve: curve,
				X:     tt.B10("84674449911578766155706641035916912012817709924247813477800860461954988274117"),
				Y:     tt.B10("49870043053956780909515260091420037915179380266406189682065174550325177769213"),
			},
		},
	}
	for _, pp := range params {
		pi, err := pp.ProveWc()
		tt.AssertNoError(t, err)

		vp := &verifyProof2Params{
			curve:        pp.curve,
			dealerParams: pp.dealerParams,
			pk:           pp.pk,
			c1:           pp.c1,
			c2:           pp.c2,
			X:            pp.X,
		}

		err = pi.VerifyWc(vp)
		tt.AssertNoError(t, err)
	}
}

func TestRange2ProofWcInvalidInputs(t *testing.T) {
	q := tt.B10("115792089237316195423570985008687907852837564279074904382605163141518161494337")
	pk, _ := crypto.Rand(q)
	nTilde, _ := crypto.Rand(q)
	h1, _ := crypto.Rand(q)
	h2, _ := crypto.Rand(q)
	y, _ := crypto.Rand(q)
	x, _ := crypto.Rand(q)
	r, _ := crypto.Rand(pk)
	nn := new(big.Int).Mul(pk, pk)
	c1, _ := crypto.Rand(nn)
	c2, _ := crypto.Rand(nn)
	curve := btcec.S256()
	pp := proof2Params{
		curve: curve,
		pk:    paillier.NewPubkey(pk),
		dealerParams: &dealer.ProofParams{
			N:  nTilde,
			H1: h1,
			H2: h2,
		},
		y:  y,
		x:  x,
		r:  r,
		c1: c1,
		c2: c2,
	}

	_, err := pp.ProveWc()
	// Expect bigX check
	if err == nil {
		t.Errorf("Expected proof to fail but succeeded")
	}
	pp.X = &curves.EcPoint{
		Curve: curve,
		X:     crypto.One,
		Y:     crypto.One,
	}

	pp.x.Add(q, crypto.One)

	_, err = pp.ProveWc()
	// Expect smallX check
	if err == nil {
		t.Errorf("Expected proof to fail but succeeded")
	}
}

func TestRange2ProofWcTampered(t *testing.T) {
	curve := btcec.S256()
	params := []*proof2Params{
		{
			curve: curve,
			pk:    paillier.NewPubkey(tt.B10("12454003829785224424909094445321308251642868283898585771126291413816540758580767663318262594367601382376375285059803068275753905283271465428331446633428881")),
			dealerParams: &dealer.ProofParams{
				N:  tt.B10("10565068081883900157917697460780075318076969969901870528290601230599518987697963206864737177306559344301211791508548333134326255847602343521746041372426881"),
				H1: tt.B10("7995751561221948028555930079358601302030574855166341757560091202406660630455075618838456965406208797281104787963327486869802618778764549164875103578199469"),
				H2: tt.B10("7656532047837282735662605356869379560760308364231923312709699220273737479894881594867882898131984223682773313158428858357773402466278427550311109701486213"),
			},
			x:  tt.B10("105065309678071150133793653554043899106789496891962463467003002461969456301937"),
			y:  tt.B10("5492702923972299127390337572417062993980668847185989290093492369744698001785552062798957147644205248651717016835329378738252704422952664489273869210714003"),
			r:  tt.B10("1479534906543044211837231294218146026461926193132920007306744928145282345504037584342904362659217507974835202601777094522405553436698892393763885061388478"),
			c1: tt.B10("143139889611903589791816262441353094495263441207310098132338003158492847002109314489881492343532425133051402774239042571452064034364626727430154115486293525771026058106095404307844006484693932483119088608294103884465173259538644991990959041058781505906814834658717310198971570959147449328032151332111925175205"),
			c2: tt.B10("118850417101393756978218229112645750124529443709777802628131640767910204536747768079123339300198360815481275960898822338743893982286509338811075702711051016050016330207766224111849625677925169769209362045134781493418045321274455428812004395599285384603402897485645035555320943199972214345978870565639942564875"),
			X: &curves.EcPoint{
				Curve: curve,
				X:     tt.B10("22963319250927626464432314334264998185524558636490611781390004531598870711554"),
				Y:     tt.B10("5554841823708042459730720811862682529836762867109252962559124452631448728441"),
			},
		},
	}

	for _, pp := range params {
		pi, _ := pp.ProveWc()
		vp := &verifyProof2Params{
			curve:        pp.curve,
			dealerParams: pp.dealerParams,
			pk:           pp.pk,
			c1:           pp.c1,
			c2:           pp.c2,
			X:            pp.X,
		}
		if err := pi.VerifyWc(vp); err != nil {
			t.Errorf("RangeProof2Wc failed: %v", err)
		}
		pi.z, _ = crypto.Add(pi.z, pi.z, pp.dealerParams.N)
		if err := pi.VerifyWc(vp); err == nil {
			t.Errorf("RangeProof2Wc Succeeded but should've failed")
		}
	}
}

func TestMtaResponse(t *testing.T) {
	curve := btcec.S256()
	p := tt.B10("165498465971525536497859961269214938631289964308823560526920537236787050377699904896554622379770774622567664583533323254169290844053351296829514419428489585830394868303448384771151376037064711115810339324861594209655768995895643373763166292366557525131878080032169065959558884224551806641003919879441772258023")
	q := tt.B10("153220808452726670380485250948911100156879705361932013063379432599289284377538415448437552509228215741069875651231891196863559464003506000735603508391315084830677543632875274002601909274977876224268309554767555583618065737119993835971994691072180460197745186395985316826257903003552375842892383205848110359007")
	sk1, _ := paillier.NewSecretKey(p, q)

	p = tt.B10("138339111123263837359132451917124015517170754257582557304041157577680753093647565539079571019759527352525282230182764675776568911651258485531289666832959634563223004878122780813127971174409241627423824739817920620625033514978109452240689980096834418477667585185553068234098818928032774937863800840934496419899")
	q = tt.B10("111340197316105583930102616485798049250836805551061785963698684670431293449431012190511774827845563599655636131202641201582662348969351077341065636122712527882376803013454034778401232399385325052628725268348642717616469145995175724308394702023025579321947067043503695398763589015618965118861276397494378589327")

	sk2, _ := paillier.NewSecretKey(p, q)

	sks := []*paillier.SecretKey{
		sk1,
		sk2,
	}
	params := []*ResponseProofParams{
		{
			Curve: curve,
			Pk:    paillier.NewPubkey(sk1.N),
			DealerParams: &dealer.ProofParams{
				N:  tt.B10("9972886211275433070035994662048032853531452341596222874944455730406324093082012471095835489777525666656101689703091272431312190038636973920385309846023861"),
				H1: tt.B10("9645317246937167948100761846052703931860463997240776753358695432123565805217588763869923227018453085470821139033044893014220360494788858157967288186449376"),
				H2: tt.B10("2050268247938630669991905733361921562776155620188477492052136889909625145533819588548316645784225045947395506721263124727029028420360795789170536034891820"),
			},
			SmallB: tt.B10("3672791578831700453156064277674396724953117514808181048561503554767812240270"),
			C1:     tt.B10("77752317560568208206364290265071376718942102730865626173881960000095692236560274288202792728825652824950440213334665539641290999004150367191954333808152149418358084240829193835628503450268249050991899350405972770791757133533190107036510955688542448103156155740141942033820625257531299610966919367173008180688"),
			B: &curves.EcPoint{
				Curve: curve,
				X:     tt.B10("1404866900921975962487332641664497649570820021171040875292185052444634265070"),
				Y:     tt.B10("22517056746740517460185947144352325511166429596179017818627772864271597116261"),
			},
		},
		{
			Curve: curve,
			Pk:    paillier.NewPubkey(sk2.N),
			DealerParams: &dealer.ProofParams{
				N:  tt.B10("11199860387109154020980079861224590064747847360780224770239565392448675561193234585575766622953310666489181959737787534900201619335359226299004761248037869"),
				H1: tt.B10("8420237019599021198189250566368868058512091420199113722789430631818946591995096516958967513657607083740933414708568490783103184892513468965472217352417370"),
				H2: tt.B10("4410824807618073391238885878571676086100288528709400551944741057952927655556136509257979472810321794801624633615860035610145462010641568995471021245619215"),
			},
			SmallB: tt.B10("35757537348996621957461215098882730872747662393337533981591895725421179051196"),
			C1:     tt.B10("92352588588873729555430055172430595475910468157254446887005633321086645506984959001356424661276448180525800287366079400461958418643751933701277823127881543396640181010723902113675414173812412486759363992283619394596611725910844787234817793297468668543716260158106119514868237915982895111931557116755302785277"),
			B: &curves.EcPoint{
				Curve: curve,
				X:     tt.B10("47119159900193871131301454349459631159900055770279833902936369018055039407305"),
				Y:     tt.B10("115146922864592374131907157924472992158066770148954896711377713046850262233029"),
			},
		},
	}

	for i, pp := range params {
		rp, err := pp.Prove()
		if err != nil {
			t.Errorf("MtAResponse failed: %v", err)
			return
		}
		vp := &ResponseVerifyParams{
			Curve:        curve,
			DealerParams: pp.DealerParams,
			Sk:           sks[i],
			C1:           pp.C1,
			B:            pp.B,
		}
		alpha, err := rp.Finalize(vp)
		if err != nil {
			t.Errorf("MtAFinalize failed: %v", err)
		}
		if err := crypto.In(alpha, curve.N); err != nil {
			t.Errorf("MtAFinalize failed. alpha is not in q")
		}
	}
}

func TestMtaResponseTampered(t *testing.T) {
	curve := btcec.S256()
	p := tt.B10("165498465971525536497859961269214938631289964308823560526920537236787050377699904896554622379770774622567664583533323254169290844053351296829514419428489585830394868303448384771151376037064711115810339324861594209655768995895643373763166292366557525131878080032169065959558884224551806641003919879441772258023")
	q := tt.B10("153220808452726670380485250948911100156879705361932013063379432599289284377538415448437552509228215741069875651231891196863559464003506000735603508391315084830677543632875274002601909274977876224268309554767555583618065737119993835971994691072180460197745186395985316826257903003552375842892383205848110359007")
	sk1, _ := paillier.NewSecretKey(p, q)

	p = tt.B10("138339111123263837359132451917124015517170754257582557304041157577680753093647565539079571019759527352525282230182764675776568911651258485531289666832959634563223004878122780813127971174409241627423824739817920620625033514978109452240689980096834418477667585185553068234098818928032774937863800840934496419899")
	q = tt.B10("111340197316105583930102616485798049250836805551061785963698684670431293449431012190511774827845563599655636131202641201582662348969351077341065636122712527882376803013454034778401232399385325052628725268348642717616469145995175724308394702023025579321947067043503695398763589015618965118861276397494378589327")

	sk2, _ := paillier.NewSecretKey(p, q)

	sks := []*paillier.SecretKey{
		sk1,
		sk2,
	}
	params := []*ResponseProofParams{
		{
			Curve: curve,
			Pk:    paillier.NewPubkey(sk1.N),
			DealerParams: &dealer.ProofParams{
				N:  tt.B10("9972886211275433070035994662048032853531452341596222874944455730406324093082012471095835489777525666656101689703091272431312190038636973920385309846023861"),
				H1: tt.B10("9645317246937167948100761846052703931860463997240776753358695432123565805217588763869923227018453085470821139033044893014220360494788858157967288186449376"),
				H2: tt.B10("2050268247938630669991905733361921562776155620188477492052136889909625145533819588548316645784225045947395506721263124727029028420360795789170536034891820"),
			},
			SmallB: tt.B10("3672791578831700453156064277674396724953117514808181048561503554767812240270"),
			C1:     tt.B10("77752317560568208206364290265071376718942102730865626173881960000095692236560274288202792728825652824950440213334665539641290999004150367191954333808152149418358084240829193835628503450268249050991899350405972770791757133533190107036510955688542448103156155740141942033820625257531299610966919367173008180688"),
			B: &curves.EcPoint{
				Curve: curve,
				X:     tt.B10("1404866900921975962487332641664497649570820021171040875292185052444634265070"),
				Y:     tt.B10("22517056746740517460185947144352325511166429596179017818627772864271597116261"),
			},
		},
		{
			Curve: curve,
			Pk:    paillier.NewPubkey(sk2.N),
			DealerParams: &dealer.ProofParams{
				N:  tt.B10("11199860387109154020980079861224590064747847360780224770239565392448675561193234585575766622953310666489181959737787534900201619335359226299004761248037869"),
				H1: tt.B10("8420237019599021198189250566368868058512091420199113722789430631818946591995096516958967513657607083740933414708568490783103184892513468965472217352417370"),
				H2: tt.B10("4410824807618073391238885878571676086100288528709400551944741057952927655556136509257979472810321794801624633615860035610145462010641568995471021245619215"),
			},
			SmallB: tt.B10("35757537348996621957461215098882730872747662393337533981591895725421179051196"),
			C1:     tt.B10("92352588588873729555430055172430595475910468157254446887005633321086645506984959001356424661276448180525800287366079400461958418643751933701277823127881543396640181010723902113675414173812412486759363992283619394596611725910844787234817793297468668543716260158106119514868237915982895111931557116755302785277"),
			B: &curves.EcPoint{
				Curve: curve,
				X:     tt.B10("47119159900193871131301454349459631159900055770279833902936369018055039407305"),
				Y:     tt.B10("115146922864592374131907157924472992158066770148954896711377713046850262233029"),
			},
		},
	}

	for i, pp := range params {
		rp, err := pp.Prove()
		if err != nil {
			t.Errorf("MtAResponse failed: %v", err)
			return
		}
		vp := &ResponseVerifyParams{
			Curve:        curve,
			DealerParams: pp.DealerParams,
			Sk:           sks[i],
			C1:           pp.C1,
			B:            pp.B,
		}
		vp.C1.Add(vp.C1, crypto.One)
		alpha, err := rp.Finalize(vp)
		if err == nil {
			t.Errorf("MtAFinalize succeeded but should've failed")
		}
		if alpha != nil {
			t.Errorf("MtAFinalize succeeded but should've failed")
		}
	}
}

func TestMtaResponseWrongSk(t *testing.T) {
	curve := btcec.S256()
	p := tt.B10("165498465971525536497859961269214938631289964308823560526920537236787050377699904896554622379770774622567664583533323254169290844053351296829514419428489585830394868303448384771151376037064711115810339324861594209655768995895643373763166292366557525131878080032169065959558884224551806641003919879441772258023")
	q := tt.B10("153220808452726670380485250948911100156879705361932013063379432599289284377538415448437552509228215741069875651231891196863559464003506000735603508391315084830677543632875274002601909274977876224268309554767555583618065737119993835971994691072180460197745186395985316826257903003552375842892383205848110359007")
	sk1, _ := paillier.NewSecretKey(p, q)

	p = tt.B10("138339111123263837359132451917124015517170754257582557304041157577680753093647565539079571019759527352525282230182764675776568911651258485531289666832959634563223004878122780813127971174409241627423824739817920620625033514978109452240689980096834418477667585185553068234098818928032774937863800840934496419899")
	q = tt.B10("111340197316105583930102616485798049250836805551061785963698684670431293449431012190511774827845563599655636131202641201582662348969351077341065636122712527882376803013454034778401232399385325052628725268348642717616469145995175724308394702023025579321947067043503695398763589015618965118861276397494378589327")

	sk2, _ := paillier.NewSecretKey(p, q)

	sks := []*paillier.SecretKey{
		sk1,
		sk2,
	}
	params := []*ResponseProofParams{
		{
			Curve: curve,
			Pk:    paillier.NewPubkey(sk2.N),
			DealerParams: &dealer.ProofParams{
				N:  tt.B10("9972886211275433070035994662048032853531452341596222874944455730406324093082012471095835489777525666656101689703091272431312190038636973920385309846023861"),
				H1: tt.B10("9645317246937167948100761846052703931860463997240776753358695432123565805217588763869923227018453085470821139033044893014220360494788858157967288186449376"),
				H2: tt.B10("2050268247938630669991905733361921562776155620188477492052136889909625145533819588548316645784225045947395506721263124727029028420360795789170536034891820"),
			},
			SmallB: tt.B10("3672791578831700453156064277674396724953117514808181048561503554767812240270"),
			C1:     tt.B10("77752317560568208206364290265071376718942102730865626173881960000095692236560274288202792728825652824950440213334665539641290999004150367191954333808152149418358084240829193835628503450268249050991899350405972770791757133533190107036510955688542448103156155740141942033820625257531299610966919367173008180688"),
			B: &curves.EcPoint{
				Curve: curve,
				X:     tt.B10("1404866900921975962487332641664497649570820021171040875292185052444634265070"),
				Y:     tt.B10("22517056746740517460185947144352325511166429596179017818627772864271597116261"),
			},
		},
		{
			Curve: curve,
			Pk:    paillier.NewPubkey(sk1.N),
			DealerParams: &dealer.ProofParams{
				N:  tt.B10("11199860387109154020980079861224590064747847360780224770239565392448675561193234585575766622953310666489181959737787534900201619335359226299004761248037869"),
				H1: tt.B10("8420237019599021198189250566368868058512091420199113722789430631818946591995096516958967513657607083740933414708568490783103184892513468965472217352417370"),
				H2: tt.B10("4410824807618073391238885878571676086100288528709400551944741057952927655556136509257979472810321794801624633615860035610145462010641568995471021245619215"),
			},
			SmallB: tt.B10("35757537348996621957461215098882730872747662393337533981591895725421179051196"),
			C1:     tt.B10("92352588588873729555430055172430595475910468157254446887005633321086645506984959001356424661276448180525800287366079400461958418643751933701277823127881543396640181010723902113675414173812412486759363992283619394596611725910844787234817793297468668543716260158106119514868237915982895111931557116755302785277"),
			B: &curves.EcPoint{
				Curve: curve,
				X:     tt.B10("47119159900193871131301454349459631159900055770279833902936369018055039407305"),
				Y:     tt.B10("115146922864592374131907157924472992158066770148954896711377713046850262233029"),
			},
		},
	}

	for i, pp := range params {
		rp, err := pp.Prove()
		if err != nil {
			t.Errorf("MtAResponse failed: %v", err)
			return
		}
		vp := &ResponseVerifyParams{
			Curve:        curve,
			DealerParams: pp.DealerParams,
			Sk:           sks[i],
			C1:           pp.C1,
			B:            pp.B,
		}

		alpha, err := rp.Finalize(vp)
		if err == nil {
			t.Errorf("MtAFinalize succeeded but should've failed")
		}
		if alpha != nil {
			t.Errorf("MtAFinalize succeeded but should've failed")
		}
	}
}

func TestMtaResponseWc(t *testing.T) {
	curve := btcec.S256()
	p := tt.B10("165498465971525536497859961269214938631289964308823560526920537236787050377699904896554622379770774622567664583533323254169290844053351296829514419428489585830394868303448384771151376037064711115810339324861594209655768995895643373763166292366557525131878080032169065959558884224551806641003919879441772258023")
	q := tt.B10("153220808452726670380485250948911100156879705361932013063379432599289284377538415448437552509228215741069875651231891196863559464003506000735603508391315084830677543632875274002601909274977876224268309554767555583618065737119993835971994691072180460197745186395985316826257903003552375842892383205848110359007")
	sk1, _ := paillier.NewSecretKey(p, q)

	p = tt.B10("138339111123263837359132451917124015517170754257582557304041157577680753093647565539079571019759527352525282230182764675776568911651258485531289666832959634563223004878122780813127971174409241627423824739817920620625033514978109452240689980096834418477667585185553068234098818928032774937863800840934496419899")
	q = tt.B10("111340197316105583930102616485798049250836805551061785963698684670431293449431012190511774827845563599655636131202641201582662348969351077341065636122712527882376803013454034778401232399385325052628725268348642717616469145995175724308394702023025579321947067043503695398763589015618965118861276397494378589327")
	sk2, _ := paillier.NewSecretKey(p, q)

	sks := []*paillier.SecretKey{
		sk1,
		sk2,
	}

	params := []*ResponseProofParams{
		{
			Curve: curve,
			Pk:    paillier.NewPubkey(sk1.N),
			DealerParams: &dealer.ProofParams{
				N:  tt.B10("9039439634444824307508960751383917494860453859140486800804377263935631222453614752524890446026796441312472278432791555840405344583483734720495411403245341"),
				H1: tt.B10("175854216774129343007276239448395891168112696535680488272500883809002629028020863635719402934930695093869431279518728877092436324149259536576325085223306"),
				H2: tt.B10("6307050187956924667864766848371197144510791412166574989883457690848742178406996950362636692594817895627086478115929251619995169388211920572432371440432347"),
			},
			SmallB: tt.B10("52267911369760448083721726508303370554429030131465579507196814348877287376175"),
			C1:     tt.B10("93754185865506539900146251138967028050138438425830227162734497980682090590177901823650921334915913917868690888765728438724497317559474386038306965827476012034259085194788921672874210195001360283191491538466572357948080845312295163017659705576708240686678523086913486497655485353079002424965875207215069433398"),
			B: &curves.EcPoint{
				Curve: curve,
				X:     tt.B10("46954861409208447737222535381893412230292203379578782164747089670087262529053"),
				Y:     tt.B10("27561307727226443248314925239745475174755673899477133056173695085314410311303"),
			},
		},
		{
			Curve: curve,
			Pk:    paillier.NewPubkey(sk2.N),
			DealerParams: &dealer.ProofParams{
				N:  tt.B10("9643670778755502087821511421601217246607541351131474488232424192369802750396732907390248701851324825725530822397546546505555733008152836274165662480740417"),
				H1: tt.B10("7843381716533908821162161041946908084554884986407926815754661446302558744899453613400103510283205209464285840290645719613059411061767360623582068930361898"),
				H2: tt.B10("8675621642889082921911159451182831584536536604341004981762562955656958762259322285123115196323048509747676814279953111100389711921780293874360929010502564"),
			},
			SmallB: tt.B10("96239849653450913364080147788247184659137655804206953534092167696450698926934"),
			C1:     tt.B10("83665058672718242257733172987490955606067969188309375700725991273542909812324380350060502232466695592442821671447507874987206896988955864837869918873659407684672821529999047344427388923843813425378165980734381968601276897393925133091718868356318532966891511178329432381215866238662246512828543244610787501373"),
			B: &curves.EcPoint{
				Curve: curve,
				X:     tt.B10("73152511031340534294337476499647134418743213468977810079263243542061796393179"),
				Y:     tt.B10("37239378704657125612907515682572196819463356277616280533808406179170645816253"),
			},
		},
	}
	for i, pp := range params {
		rp, err := pp.ProveWc()
		if err != nil {
			t.Errorf("MtAResponseWc failed: %v", err)
			return
		}
		vp := &ResponseVerifyParams{
			Curve:        curve,
			DealerParams: pp.DealerParams,
			Sk:           sks[i],
			C1:           pp.C1,
			B:            pp.B,
		}
		alpha, err := rp.FinalizeWc(vp)
		if err != nil {
			t.Errorf("MtAFinalizeWc failed: %v", err)
		}
		if err := crypto.In(alpha, curve.N); err != nil {
			t.Errorf("MtAFinalizeWc failed. alpha is not in q")
		}
	}
}

func TestMtaResponseWcTampered(t *testing.T) {
	curve := btcec.S256()
	p := tt.B10("165498465971525536497859961269214938631289964308823560526920537236787050377699904896554622379770774622567664583533323254169290844053351296829514419428489585830394868303448384771151376037064711115810339324861594209655768995895643373763166292366557525131878080032169065959558884224551806641003919879441772258023")
	q := tt.B10("153220808452726670380485250948911100156879705361932013063379432599289284377538415448437552509228215741069875651231891196863559464003506000735603508391315084830677543632875274002601909274977876224268309554767555583618065737119993835971994691072180460197745186395985316826257903003552375842892383205848110359007")
	sk1, _ := paillier.NewSecretKey(p, q)

	p = tt.B10("138339111123263837359132451917124015517170754257582557304041157577680753093647565539079571019759527352525282230182764675776568911651258485531289666832959634563223004878122780813127971174409241627423824739817920620625033514978109452240689980096834418477667585185553068234098818928032774937863800840934496419899")
	q = tt.B10("111340197316105583930102616485798049250836805551061785963698684670431293449431012190511774827845563599655636131202641201582662348969351077341065636122712527882376803013454034778401232399385325052628725268348642717616469145995175724308394702023025579321947067043503695398763589015618965118861276397494378589327")

	sk2, _ := paillier.NewSecretKey(p, q)

	sks := []*paillier.SecretKey{
		sk1,
		sk2,
	}
	params := []*ResponseProofParams{
		{
			Curve: curve,
			Pk:    paillier.NewPubkey(sk1.N),
			DealerParams: &dealer.ProofParams{
				N:  tt.B10("9972886211275433070035994662048032853531452341596222874944455730406324093082012471095835489777525666656101689703091272431312190038636973920385309846023861"),
				H1: tt.B10("9645317246937167948100761846052703931860463997240776753358695432123565805217588763869923227018453085470821139033044893014220360494788858157967288186449376"),
				H2: tt.B10("2050268247938630669991905733361921562776155620188477492052136889909625145533819588548316645784225045947395506721263124727029028420360795789170536034891820"),
			},
			SmallB: tt.B10("3672791578831700453156064277674396724953117514808181048561503554767812240270"),
			C1:     tt.B10("77752317560568208206364290265071376718942102730865626173881960000095692236560274288202792728825652824950440213334665539641290999004150367191954333808152149418358084240829193835628503450268249050991899350405972770791757133533190107036510955688542448103156155740141942033820625257531299610966919367173008180688"),
			B: &curves.EcPoint{
				Curve: curve,
				X:     tt.B10("1404866900921975962487332641664497649570820021171040875292185052444634265070"),
				Y:     tt.B10("22517056746740517460185947144352325511166429596179017818627772864271597116261"),
			},
		},
		{
			Curve: curve,
			Pk:    paillier.NewPubkey(sk2.N),
			DealerParams: &dealer.ProofParams{
				N:  tt.B10("11199860387109154020980079861224590064747847360780224770239565392448675561193234585575766622953310666489181959737787534900201619335359226299004761248037869"),
				H1: tt.B10("8420237019599021198189250566368868058512091420199113722789430631818946591995096516958967513657607083740933414708568490783103184892513468965472217352417370"),
				H2: tt.B10("4410824807618073391238885878571676086100288528709400551944741057952927655556136509257979472810321794801624633615860035610145462010641568995471021245619215"),
			},
			SmallB: tt.B10("35757537348996621957461215098882730872747662393337533981591895725421179051196"),
			C1:     tt.B10("92352588588873729555430055172430595475910468157254446887005633321086645506984959001356424661276448180525800287366079400461958418643751933701277823127881543396640181010723902113675414173812412486759363992283619394596611725910844787234817793297468668543716260158106119514868237915982895111931557116755302785277"),
			B: &curves.EcPoint{
				Curve: curve,
				X:     tt.B10("47119159900193871131301454349459631159900055770279833902936369018055039407305"),
				Y:     tt.B10("115146922864592374131907157924472992158066770148954896711377713046850262233029"),
			},
		},
	}

	for i, pp := range params {
		rp, err := pp.ProveWc()
		if err != nil {
			t.Errorf("MtAResponse failed: %v", err)
			return
		}
		vp := &ResponseVerifyParams{
			Curve:        curve,
			DealerParams: pp.DealerParams,
			Sk:           sks[i],
			C1:           pp.C1,
			B:            pp.B,
		}
		vp.C1.Add(vp.C1, crypto.One)
		alpha, err := rp.FinalizeWc(vp)
		if err == nil {
			t.Errorf("MtAFinalize succeeded but should've failed")
		}
		if alpha != nil {
			t.Errorf("MtAFinalize succeeded but should've failed")
		}
		vp.C1.Sub(vp.C1, crypto.One)
		vp.B.X, vp.B.Y = curve.Add(vp.B.X, vp.B.Y, crypto.One, crypto.Zero)
		alpha, err = rp.FinalizeWc(vp)
		if err == nil {
			t.Errorf("MtAFinalize succeeded but should've failed")
		}
		if alpha != nil {
			t.Errorf("MtAFinalize succeeded but should've failed")
		}
	}
}

func TestMtaResponseWcWrongSk(t *testing.T) {
	curve := btcec.S256()
	p := tt.B10("165498465971525536497859961269214938631289964308823560526920537236787050377699904896554622379770774622567664583533323254169290844053351296829514419428489585830394868303448384771151376037064711115810339324861594209655768995895643373763166292366557525131878080032169065959558884224551806641003919879441772258023")
	q := tt.B10("153220808452726670380485250948911100156879705361932013063379432599289284377538415448437552509228215741069875651231891196863559464003506000735603508391315084830677543632875274002601909274977876224268309554767555583618065737119993835971994691072180460197745186395985316826257903003552375842892383205848110359007")
	sk1, _ := paillier.NewSecretKey(p, q)

	p = tt.B10("138339111123263837359132451917124015517170754257582557304041157577680753093647565539079571019759527352525282230182764675776568911651258485531289666832959634563223004878122780813127971174409241627423824739817920620625033514978109452240689980096834418477667585185553068234098818928032774937863800840934496419899")
	q = tt.B10("111340197316105583930102616485798049250836805551061785963698684670431293449431012190511774827845563599655636131202641201582662348969351077341065636122712527882376803013454034778401232399385325052628725268348642717616469145995175724308394702023025579321947067043503695398763589015618965118861276397494378589327")

	sk2, _ := paillier.NewSecretKey(p, q)

	sks := []*paillier.SecretKey{
		sk1,
		sk2,
	}
	params := []*ResponseProofParams{
		{
			Curve: curve,
			Pk:    paillier.NewPubkey(sk2.N),
			DealerParams: &dealer.ProofParams{
				N:  tt.B10("9972886211275433070035994662048032853531452341596222874944455730406324093082012471095835489777525666656101689703091272431312190038636973920385309846023861"),
				H1: tt.B10("9645317246937167948100761846052703931860463997240776753358695432123565805217588763869923227018453085470821139033044893014220360494788858157967288186449376"),
				H2: tt.B10("2050268247938630669991905733361921562776155620188477492052136889909625145533819588548316645784225045947395506721263124727029028420360795789170536034891820"),
			},
			SmallB: tt.B10("3672791578831700453156064277674396724953117514808181048561503554767812240270"),
			C1:     tt.B10("77752317560568208206364290265071376718942102730865626173881960000095692236560274288202792728825652824950440213334665539641290999004150367191954333808152149418358084240829193835628503450268249050991899350405972770791757133533190107036510955688542448103156155740141942033820625257531299610966919367173008180688"),
			B: &curves.EcPoint{
				Curve: curve,
				X:     tt.B10("1404866900921975962487332641664497649570820021171040875292185052444634265070"),
				Y:     tt.B10("22517056746740517460185947144352325511166429596179017818627772864271597116261"),
			},
		},
		{
			Curve: curve,
			Pk:    paillier.NewPubkey(sk1.N),
			DealerParams: &dealer.ProofParams{
				N:  tt.B10("11199860387109154020980079861224590064747847360780224770239565392448675561193234585575766622953310666489181959737787534900201619335359226299004761248037869"),
				H1: tt.B10("8420237019599021198189250566368868058512091420199113722789430631818946591995096516958967513657607083740933414708568490783103184892513468965472217352417370"),
				H2: tt.B10("4410824807618073391238885878571676086100288528709400551944741057952927655556136509257979472810321794801624633615860035610145462010641568995471021245619215"),
			},
			SmallB: tt.B10("35757537348996621957461215098882730872747662393337533981591895725421179051196"),
			C1:     tt.B10("92352588588873729555430055172430595475910468157254446887005633321086645506984959001356424661276448180525800287366079400461958418643751933701277823127881543396640181010723902113675414173812412486759363992283619394596611725910844787234817793297468668543716260158106119514868237915982895111931557116755302785277"),
			B: &curves.EcPoint{
				Curve: curve,
				X:     tt.B10("47119159900193871131301454349459631159900055770279833902936369018055039407305"),
				Y:     tt.B10("115146922864592374131907157924472992158066770148954896711377713046850262233029"),
			},
		},
	}

	for i, pp := range params {
		rp, err := pp.ProveWc()
		if err != nil {
			t.Errorf("MtAResponseWc failed: %v", err)
			return
		}
		vp := &ResponseVerifyParams{
			Curve:        curve,
			DealerParams: pp.DealerParams,
			Sk:           sks[i],
			C1:           pp.C1,
			B:            pp.B,
		}

		alpha, err := rp.FinalizeWc(vp)
		if err == nil {
			t.Errorf("MtAFinalizeWc succeeded but should've failed")
		}
		if alpha != nil {
			t.Errorf("MtAFinalizeWc succeeded but should've failed")
		}
	}
}

// Convenience function for making a big.Int
func bi(x int64) *big.Int {
	return big.NewInt(x)
}

// Small number known answer tests for inc
func TestInc(t *testing.T) {
	tests := []struct {
		alpha, beta, n, expected *big.Int
	}{
		// (N+1)^alpha * Beta^N  mod N^2
		// Tests in Z_{3^2}
		{bi(9), bi(2), bi(3), bi(8)},
		{bi(7), bi(3), bi(3), bi(0)},
		{bi(2), bi(2), bi(3), bi(2)},
		{bi(7), bi(0), bi(3), bi(0)},
		{bi(5), bi(1), bi(3), bi(7)},
		{bi(4), bi(8), bi(3), bi(5)},
	}

	// Run all the tests!
	for _, test := range tests {
		actual, err := inc(test.alpha, test.beta, test.n)
		tt.AssertNoError(t, err)
		tt.AssertBigIntEq(t, test.expected, actual)
	}
}

// Small number known answer tests for pedersen
func TestPedersen(t *testing.T) {
	tests := []struct {
		g, alpha, h, beta, n, expected *big.Int
	}{
		// g^alpha * h*Beta  (mod n)
		// Tests in Z_{13}
		{bi(9), bi(8), bi(2), bi(1), bi(13), bi(6)},
		{bi(9), bi(9), bi(5), bi(0), bi(13), bi(1)},
		{bi(3), bi(4), bi(4), bi(3), bi(13), bi(10)},
		{bi(1), bi(5), bi(6), bi(5), bi(13), bi(2)},
		{bi(6), bi(3), bi(5), bi(6), bi(13), bi(5)},
		{bi(0), bi(7), bi(6), bi(7), bi(13), bi(0)},
	}

	// Run all the tests!
	for _, test := range tests {
		actual, err := pedersen(test.g, test.h, test.alpha, test.beta, test.n)
		tt.AssertNoError(t, err)
		tt.AssertBigIntEq(t, test.expected, actual)
	}
}

// Small number known answer tests for schnorr
func TestSchnorr(t *testing.T) {
	tests := []struct {
		x, y, z, expected *big.Int
	}{
		// xy + z
		{bi(98), bi(2), bi(59), bi(255)},
		{bi(99), bi(304), bi(65), bi(30161)},
		{bi(168), bi(0), bi(13), bi(13)},
		{bi(70), bi(21), bi(8), bi(1478)},
		{bi(19), bi(23), bi(36), bi(473)},
	}

	// Run all the tests!
	for _, test := range tests {
		actual, err := schnorr(test.x, test.y, test.z)
		tt.AssertNoError(t, err)
		tt.AssertBigIntEq(t, test.expected, actual)
	}
}

// Test that Range2Proof can be marshaled and unmarshaled correctly
func TestMarshalJsonRange2Proof(t *testing.T) {
	hello := "test"
	assert.NotNil(t, hello)
	test := Range2Proof{
		z:  bi(12),
		e:  bi(44),
		s:  bi(56),
		s1: bi(23),
		s2: bi(14),
		t:  bi(49),
		t1: bi(99),
		t2: bi(67),
	}

	testJSON, err := json.Marshal(test)
	assert.NoError(t, err)
	assert.NotNil(t, testJSON)

	unmarshaled := new(Range2Proof)
	err = json.Unmarshal(testJSON, unmarshaled)
	assert.NoError(t, err)

	assert.Equal(t, test.z, unmarshaled.z)
	assert.Equal(t, test.e, unmarshaled.e)
	assert.Equal(t, test.s, unmarshaled.s)
	assert.Equal(t, test.s1, unmarshaled.s1)
	assert.Equal(t, test.s2, unmarshaled.s2)
	assert.Equal(t, test.t, unmarshaled.t)
	assert.Equal(t, test.t1, unmarshaled.t1)
	assert.Equal(t, test.t2, unmarshaled.t2)
}

// Test that ResponseProof can be marshaled and unmarshaled correctly
func TestMarshalJsonResponseProof(t *testing.T) {
	curve := btcec.S256()
	p := tt.B10("165498465971525536497859961269214938631289964308823560526920537236787050377699904896554622379770774622567664583533323254169290844053351296829514419428489585830394868303448384771151376037064711115810339324861594209655768995895643373763166292366557525131878080032169065959558884224551806641003919879441772258023")
	q := tt.B10("153220808452726670380485250948911100156879705361932013063379432599289284377538415448437552509228215741069875651231891196863559464003506000735603508391315084830677543632875274002601909274977876224268309554767555583618065737119993835971994691072180460197745186395985316826257903003552375842892383205848110359007")
	sk1, _ := paillier.NewSecretKey(p, q)

	rpp := ResponseProofParams{
		Curve: curve,
		Pk:    paillier.NewPubkey(sk1.N),
		DealerParams: &dealer.ProofParams{
			N:  tt.B10("9972886211275433070035994662048032853531452341596222874944455730406324093082012471095835489777525666656101689703091272431312190038636973920385309846023861"),
			H1: tt.B10("9645317246937167948100761846052703931860463997240776753358695432123565805217588763869923227018453085470821139033044893014220360494788858157967288186449376"),
			H2: tt.B10("2050268247938630669991905733361921562776155620188477492052136889909625145533819588548316645784225045947395506721263124727029028420360795789170536034891820"),
		},
		SmallB: tt.B10("3672791578831700453156064277674396724953117514808181048561503554767812240270"),
		C1:     tt.B10("77752317560568208206364290265071376718942102730865626173881960000095692236560274288202792728825652824950440213334665539641290999004150367191954333808152149418358084240829193835628503450268249050991899350405972770791757133533190107036510955688542448103156155740141942033820625257531299610966919367173008180688"),
		B: &curves.EcPoint{
			Curve: curve,
			X:     tt.B10("1404866900921975962487332641664497649570820021171040875292185052444634265070"),
			Y:     tt.B10("22517056746740517460185947144352325511166429596179017818627772864271597116261"),
		},
	}

	test, err := rpp.Prove()
	assert.NoError(t, err)
	assert.NotNil(t, test)

	testJSON, err := json.Marshal(test)
	assert.NoError(t, err)
	assert.NotNil(t, testJSON)

	unmarshaled := new(ResponseProof)
	err = json.Unmarshal(testJSON, unmarshaled)
	assert.NoError(t, err)
	assert.NotNil(t, unmarshaled)

	assert.Equal(t, test.C2, unmarshaled.C2)
	assert.Equal(t, test.Beta, unmarshaled.Beta)
	assert.Equal(t, test.R2proof.z, unmarshaled.R2proof.z)
	assert.Equal(t, test.R2proof.s, unmarshaled.R2proof.s)
	assert.Equal(t, test.R2proof.s1, unmarshaled.R2proof.s1)
	assert.Equal(t, test.R2proof.t, unmarshaled.R2proof.t)
	assert.Equal(t, test.R2proof.t1, unmarshaled.R2proof.t1)
}

// Ensures that marshal-unmarshal Range1Proof is the identity function
func TestMarshalRange1ProofRoundTrip(t *testing.T) {
	expected := Range1Proof{
		bi(-1),
		bi(0),
		bi(1),
		bi(2),
		bi(3),
	}

	// Marshal and test
	jsonBytes, err := json.Marshal(expected)
	assert.NoError(t, err)
	assert.NotNil(t, jsonBytes)

	// Unmarshal and test
	var actual Range1Proof
	err = json.Unmarshal(jsonBytes, &actual)
	assert.NoError(t, err)

	assert.Equal(t, expected.z, actual.z)
	assert.Equal(t, expected.e, actual.e)
	assert.Equal(t, expected.s, actual.s)
	assert.Equal(t, expected.s1, actual.s1)
	assert.Equal(t, expected.s2, actual.s2)
}
